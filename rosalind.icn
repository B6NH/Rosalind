
# -------------------------------------------------------------------

procedure FIBO()

  input := 6

  arr := [0, 1] ; input +:= 1

  if 3 > input then

    write(arr[input])

  else {

    every 3 to input do {
      nxt := arr[1] + arr[2]
      arr[1] := arr[2]
      arr[2] := nxt
    }

    write(arr[2])

  }

end

# -------------------------------------------------------------------

procedure BINS()

  # Read input
  f := open("bins.txt","r")
  n := integer(read(f)) ; m := integer(read(f))
  sorted := lineToInts(read(f))
  ints := lineToInts(read(f))
  close(f)

  every writes(binS(ints[1 to m], sorted, n), " ")
  write()

end

procedure binS(el, lst, maxI)

  minI := 1

  if el < lst[minI] | el > lst[maxI] then {
    return -1
  } else {

    while minI <= maxI do {

      midI := minI + (maxI - minI) / 2

      if el = lst[midI] then {
        return midI
      } else if el < lst[midI] then {
        maxI := midI - 1
      } else {
        minI := midI + 1
      }

    }

    return -1

  }

end

procedure lineToInts(line)

  ints := [] ; s := &digits ++ '-'

  line ?
    while tab(upto(s)) do
      put(ints,integer(tab(many(s))))

  return ints

end

# -------------------------------------------------------------------

procedure DEG()

  f := open("deg.txt","r")

  # Vertices and edges
  ves := lineToInts(read(f))

  # Collect edges
  edges := []
  while push(edges,lineToInts(read(f)))

  close(f)

  # Initialize array for all vertices
  t := list(ves[1], 0)

  # Count occurrences
  every t[(!edges)[1 to 2]] +:= 1

  # Display result
  every writes(t[1 to ves[1]]," ")

  write()

end

# -------------------------------------------------------------------

procedure INS()

  # Read data
  f := open("ins.txt","r")
  n := lineToInts(read(f))[1]
  arr := lineToInts(read(f))
  close(f)

  swap := 0
  every i := 1 to n do {
    k := i
    while k > 1 & arr[k] < arr[k - 1] do {
      arr[k] :=: arr[k - 1]
      k -:= 1
    }
    swap +:= i - k
  }

  # Sorted array
  every writes(!arr," ") ; write()

  # Number of swaps
  write(swap)

end

# -------------------------------------------------------------------

procedure DDEG()

  # Read data
  f := open("ddeg.txt", "r")
  ves := lineToInts(read(f))
  edges := []
  while put(edges, lineToInts(read(f)))
  close(f)

  # Create adjacency list
  adjList := list(ves[1])
  every !adjList := []
  every e := !edges do {
    push(adjList[e[1]], e[2])
    push(adjList[e[2]], e[1])
  }

  # Create occurrences list
  occurrences := list(ves[1], 0)
  every occurrences[(!edges)[1 to 2]] +:= 1

  # Vertices
  every i := 1 to ves[1] do {

    # Sum occurrences of all neighbours
    sum := 0
    every sum +:= occurrences[!adjList[i]]
    writes(sum, " ")

  }

  write()

end

# -------------------------------------------------------------------

procedure MAJ()

  # Read data
  f := open("maj.txt", "r")
  fst := lineToInts(read(f))
  every !(arrays := list(fst[1])) := lineToInts(read(f))
  close(f)

  # Half array
  h := fst[2] / 2

  # Arrays
  every a := !arrays do {

    # Occurrences
    t := table(0)
    every t[!a] +:= 1

    # Max occurrences
    maxKey := ""
    every k := key(t) do
      t[k] > t[maxKey] & maxKey := k

    # Element or -1
    writes((t[maxKey] > h & maxKey) | -1, " ")

  }

  write()

end

# -------------------------------------------------------------------

procedure MER()

  f := open("mer.txt", "r")
  n := lineToInts(read(f))[1]
  a := lineToInts(read(f))
  m := lineToInts(read(f))[1]
  b := lineToInts(read(f))
  close(f)

  arr := merge(a, b, n, m)

  # Sorted array
  every writes(!arr, " ")
  write()

end

procedure merge(a, b, n, m)

   # Total length
  tLen := n + m

  # Copy elements
  arr := list(tLen)
  iA := 1 ; iB := 1
  every i := 1 to tLen do
    (iA > n | b[iB] < a[iA] & arr[i] := b[iB] & iB +:= 1) |
    (arr[i] := a[iA] & iA +:= 1)

  return arr

end

# -------------------------------------------------------------------

procedure MS()

  f := open("ms.txt","r")
  size := lineToInts(read(f))[1]
  arr := lineToInts(read(f))
  close(f)

  arr := mSort(arr, size)
  every writes(!arr," ")
  write()

end

procedure mSort(lst, size)

  if 1 = size then {
    return lst
  } else {

    sh2 := size - (sh1 := (h := size / 2 + 1) - 1)
    return merge(mSort(lst[1:h], sh1), mSort(lst[h:0], sh2), sh1, sh2)

  }

end

# -------------------------------------------------------------------

procedure SUM2()

  f := open("sum2.txt","r")
  fst := lineToInts(read(f))
  k := fst[1] ; n := fst[2]
  arrays := list(k)
  every i := 1 to k do
    arrays[i] := lineToInts(read(f))
  close(f)

  version := 2

  # Original version
  if 1 = version then {

    every arr := !arrays do {
      str := "-1"
      every f := 1 to n - 1 do {
        every s := f + 1 to n do
          -1 * arr[f] = arr[s] & str := f || " " || s & break
        "-1" ~== str & break
      }
      write(str)
    }

  # Version based on explanation
  } else {

    every lst := !arrays do {

      t := table(0)
      every i := 1 to n do t[lst[i]] := i

      str := "-1" ; zeros := []
      every i := 1 to n do {
        if 0 = lst[i] then
          put(zeros,i) & 2 = *zeros & str := zeros[1] || " " || zeros[2] & break
        else
          other := -lst[i] & 0 ~= t[other] & str := i || " " || t[other] & break
      }

      write(str)

    }

  }

end

# -------------------------------------------------------------------

procedure BFS()

  # Read data
  f := open("bfs.txt","r")
  fst := lineToInts(read(f))
  n := fst[1]
  edges := []
  while put(edges,lineToInts(read(f)))
  close(f)

  # Table with lists of next vertices
  outs := table()
  every outs[1 to n] := []
  every e := !edges do push(outs[e[1]],e[2])

  # Start with 0 distance at vertex 1
  cDistance := 0 ; vertices := [1]

  # Initialize table of distances
  distances := table()

  # Loop until there are no more unknown vertices
  while not(allKnown(vertices,distances)) do {

    # Set distance for new vertices
    every /distances[!vertices] := cDistance

    # Collect next vertices in set
    newVertices := set()
    every insert(newVertices,!outs[!vertices])

    # Update vertices
    vertices := newVertices

    # Increase distance
    cDistance +:= 1

  }

  # Result
  every i := 1 to n do
    writes(\distances[i] | -1," ")

  write()

end

procedure allKnown(vertices,distances)
  every v := !vertices do
    member(distances,v) | fail
  return 1
end

# -------------------------------------------------------------------

procedure PPER()

  n := 21 ; k := 7 ; m := 1000000

  p := 1 ; nk := n - k + 1
  every p *:= (n to nk by -1) & p %:= m

  write(p)

end


# -------------------------------------------------------------------

procedure LEXF()

  # Data
  f := open("lexf.txt","r")
  al := read(f)
  n := lineToInts(read(f))[1]
  close(f)

  # Alphabet without whitespaces
  al ?:= {
    l := ""
    while tab(upto(&letters)) do
      l ||:= tab(many(&letters))
    l
  }

  every write(!lex(n,al))

end

procedure lex(level,al)

  if 1 = level then {

    return al

  } else {

    words := []

    every put(words, !al || !(lex(level - 1, al)))

    return words

  }

end

# -------------------------------------------------------------------

procedure REVP()

  f := open("revp.txt","r")
  strName := read(f)
  str := ""
  while str ||:= read(f)
  close(f)

  comp := table()
  comp["G"] := "C" ; comp["C"] := "G"
  comp["A"] := "T" ; comp["T"] := "A"

  strLen := *str ; s1 := strLen + 1
  every i := 1 to strLen do {
    every j := 4 to 12 by 2 do {
      i + j > s1 & break
      s := str[i+:j]
      revComp(s,comp) == s & write(i, " ",j)
    }
  }

end

procedure revComp(str,t)
  str := reverse(str)
  every i := 1 to *str do
    str[i] := t[str[i]]
  return str
end

# -------------------------------------------------------------------

procedure LGIS()

  f := open("lgis.txt","r")
  len := lineToInts(read(f))[1]
  arr := lineToInts(read(f))
  close(f)

  # Save indices
  tb := table()
  every i := 1 to *arr do
    tb[arr[i]] := i

  sequences := []
  every i := 1 to *arr do {
    currentIndex := i
    sequence := []
    while 0 ~= currentIndex do {
      put(sequence,arr[currentIndex])
      rest := arr[currentIndex+1:0]
      currentIndex := smallest(rest,arr[currentIndex],tb) | 0
    }
    push(sequences,sequence)
  }

  every seq := !sequences do {
    every writes(!seq," ")
    write()
  }

end

procedure smallest(lst,n,tb)

  lst := sort(lst)
  every e := !lst do {
    if e > n & tb[n] < tb[e] then
      return tb[e]
  }

  fail

end

# -------------------------------------------------------------------

procedure SSEQ()

  str1 := "ACGTACGTGACG"
  str2 := "GTA"

  i1 := 1 ; i2 := 1
  while i2 <= *str2 do {
    if str2[i2] == str1[i1] then {
      writes(i1," ")
      i2 +:= 1
    }
    i1 +:= 1
  }

  write()

end

# -------------------------------------------------------------------

procedure PMCH()

  f := open("pmch.txt","r")
  strName := read(f)
  str := ""
  while str ||:= read(f)
  close(f)

  bases := table(0)
  every b := !str do
    if b == "A" | "G" then
      bases[b] +:= 1

  write(factorial(bases["A"]) * factorial(bases["G"]))

end

procedure factorial(n)
  return if n = (1 | 0) then 1 else n * factorial(n - 1)
end

# -------------------------------------------------------------------

procedure PAR()

  f := open("par.txt","r")
  arrSize := lineToInts(read(f))[1]
  arr := lineToInts(read(f))
  close(f)

  i := 0 ; rightI := *arr ; brk := 0

  while 0 = brk & rightI ~= (i +:= 1) do {

    while arr[i] > arr[1] do {
      arr[i] :=: arr[rightI]
      rightI -:= 1
      if i = rightI then {
        brk := 1 ; break
      }
    }

  }

  arr[1] :=: arr[i - (if arr[i] > arr[1] then 1 else 0)]

  every writes(!arr," ")
  write()

end

# -------------------------------------------------------------------

procedure CC()

  # Input
  f := open("cc.txt","r")
  fst := lineToInts(read(f))
  numNodes := fst[1] ; numEdges := fst[2]
  edges := []
  while put(edges,lineToInts(read(f)))
  close(f)

  # Initialize node sets
  outs := table()
  every outs[1 to numNodes] := set()

  # Set node links
  every e := !edges do {
    insert(outs[e[1]],e[2])
    insert(outs[e[2]],e[1])
  }

  components := 0 ; knownNodes := set()
  while *knownNodes < numNodes do {

    # Find first unknown node
    every i := 1 to numNodes do
      if not(member(knownNodes,i)) then
        node := i

    # Nodes in component
    kn := set()

    # Add new nodes
    knownNodes := knownNodes ++ dfs(node,kn,outs)

    components +:= 1

  }

  write(components)

end

procedure dfs(node,knownNodes,outs)

  # Add current node
  insert(knownNodes,node)

  # Depth first search
  every n := !outs[node] do
    if not(member(knownNodes,n)) then
      dfs(n,knownNodes,outs)

  # Return connected nodes
  return knownNodes

end

# -------------------------------------------------------------------

procedure LEXV()

  f := open("lexv.txt","r")
  line := read(f)
  length := read(f)
  close(f)

  strings := []
  line ? {
    while tab(upto(&letters)) do
      put(strings,tab(many(&letters)))
  }

  every write(!nLetterWords(length,strings))

end

procedure nLetterWords(n,strings)

  if n = 1 then
    return strings
  else {

    words := []

    every s := !strings do {
      put(words,s)
      nextWords := nLetterWords(n - 1,strings)
      every put(words,s || !nextWords)
    }

    return words

  }

end

# -------------------------------------------------------------------

procedure TREE()

  f := open("tree.txt","r")
  numNodes := read(f)
  edges := []
  while push(edges,lineToInts(read(f)))
  close(f)

  allEdges := numNodes - 1
  write(allEdges - *edges)

  # Or
  # numComponents - 1 + missingNodes

end

# -------------------------------------------------------------------

procedure SQ()

  # Read graph data
  f := open("sq.txt","r")
  nGraphs := read(f)
  read(f)
  graphs := []
  every 1 to nGraphs do {
    edges := []
    while (line := read(f)) ~== "" do {
      put(edges,lineToInts(line))
    }
    put(graphs,edges)
  }
  close(f)

  # Process graphs
  every graph := !graphs do {

    # Find number of nodes
    nodes := set()
    every edge := !graph do {
      insert(nodes,edge[1])
      insert(nodes,edge[2])
    }

    # Set number of nodes in graph
    numNodes := *nodes

    # Initialize adjacency matrix
    matrix := list(numNodes)
    every matrix[1 to numNodes] := list(numNodes,0)

    # Set connections in matrix
    every edge := !graph do {

      # Ignore node connection to itself
      if edge[1] ~= edge[2] then {
        matrix[edge[1],edge[2]] := 1
        matrix[edge[2],edge[1]] := 1
      }

    }

    # Check combinations of matrix rows
    brk := -1
    every i := 1 to numNodes - 1 do {
      every j := i + 1 to numNodes do {

        # Nodes have at least two common neighbors
        if atLeastTwo(andRows(matrix[i],matrix[j])) then {
          brk := 1 ; break
        }

      }

      if 1 = brk then break

    }

    # Display 1/-1
    writes(brk," ")

  }

  write()

end

procedure andRows(row1,row2)

  len := *row1
  result := list(len,0)

  every i := 1 to len do
    if 1 = row1[i] & 1 = row2[i] then
      result[i] := 1

  return result

end

procedure atLeastTwo(arr)
  sum := 0
  every 1 = !arr & sum +:= 1 & 2 = sum & return 1
end

# -------------------------------------------------------------------

procedure INOD()

  leaves := 4
  edges := leaves * 2 - 2
  nodes := edges + 1

  write("Leaves: ",leaves)
  write("Edges: ",edges)
  write("Nodes: ",nodes)
  write("Internal nodes: ",nodes - leaves - 1)

end

# -------------------------------------------------------------------

procedure PDST()

  # Read strings
  strings := readStrings("pdst.fasta")

  # Calculate distances
  distances := []
  every i := 1 to *strings - 1 do {
    every j := i + 1 to *strings do {
      put(distances,[[i,j],pDistance(strings[i],strings[j])])
    }
  }

  # Initialize matrix
  matrix := list(*strings)
  every !matrix := list(*strings,0)

  # Fill matrix
  every d := !distances do {
    pos := d[1] ; val := d[2]
    matrix[pos[1],pos[2]] := val
    matrix[pos[2],pos[1]] := val
  }

  # Display matrix
  every row := !matrix do {
    every writes(!row," ")
    write()
  }

end

procedure pDistance(str1,str2)
  return real(hDistance(str1,str2)) / *str1
end

procedure hDistance(str1,str2)

  d := 0
  every i := 1 to *str1 do {
    if str1[i] ~== str2[i] then
      d +:= 1
  }

  return d

end

procedure readStrings(file)

  f := open(file,"r")
  str := ""
  strings := []
  while line := read(f) do {
    if line[1] == ">" then {
      if "" ~== str then {
        put(strings,str)
        str := ""
      }
    } else {
      str ||:= line
    }
  }
  put(strings,str)
  close(f)

  return strings

end

# -------------------------------------------------------------------

procedure SSET()

  n := 3

  write(2^n%1000000)

end

# -------------------------------------------------------------------

procedure LONG()

  # Read strings from file
  strings := readStrings("long.fasta")

  # Choose first string
  accumulatedString := pop(strings)

  # Find next string to connect
  while 0 ~= *strings do {

    every i := 1 to *strings do {

      # Merge matching string and delete it from list
      if "" ~== (nxt := mergeStrings(accumulatedString,strings[i])) then {
        delete(strings,i)
        accumulatedString := nxt
        break
      }

    }

  }

  # Result
  write(accumulatedString)

end

procedure mergeStrings(str1,str2)

  # More than half length
  hLen := *str2 / 2 + 1

  # Beginning and ending of first string
  beginning := str1[1+:hLen]
  ending := str1[0+:-hLen]

  every i := 1 to *str2 - hLen + 1 do {

    # Substring from second string
    currentSubstring := str2[i+:hLen]

    if currentSubstring == beginning then {

      # Beginning of first string found in second string
      # Return part of second string and all of the first string
      return str2[1:i] || str1

    } else if currentSubstring == ending then {

      # Ending of first string found in second string
      # Return first string and part after ending from second string
      return str1 || str2[i+hLen:0]

    }

  }

  # Strings don't match
  return ""

end

# -------------------------------------------------------------------

procedure CORR()

  # Read strings
  strings := readStrings("corr.fasta")

  # Complements
  comp := table()
  comp["G"] := "C" ; comp["C"] := "G"
  comp["A"] := "T" ; comp["T"] := "A"

  # Find correct and erroneous readings
  wrongStrings := set() ; correctStrings := set()
  every i := 1 to *strings do {

    currentString := strings[i]

    # String already accepted
    if member(correctStrings,currentString) then next

    good := 0
    every j := i + 1 to *strings do {

      otherString := strings[j]

      if (currentString == otherString) | isRevComp(currentString,otherString,comp) then {

        # Add two correct strings
        insert(correctStrings,strings[i],strings[j]) ; good := 1 ; break

      }

    }

    # Add wrong string
    if 0 = good then insert(wrongStrings,strings[i])

  }

  # Correct strings
  every ws := !wrongStrings do {

    writes(ws,"->")

    every cs := !correctStrings do {
      if c := strCorr(ws,cs,comp) then {
        writes(c) ; write() ; break
      }
    }

  }

end

procedure strCorr(badString,goodString,t)

  # Normal distance
  d := hDistance(badString,goodString)
  if 1 = d then {
    return goodString
  } else {

    # Reverse complement distance
    rc := revComp(goodString,t)
    d := hDistance(badString,rc)
    if 1 = d then return rc

  }

end

procedure isRevComp(str1,str2,t)
  if str1 == revComp(str2,t) then return 1
end

# -------------------------------------------------------------------

procedure KMER()

  kmerLength := 4
  string := readStrings("kmer.fasta")[1]

  # Letters
  alphabet := "ACGT"
  
  # Function lex from LEXF problem
  kmers := lex(kmerLength,alphabet)

  every kmer := !kmers do {

    # Find kmer in string
    counter := 0
    every find(kmer,string) do counter +:= 1

    # Number of occurrences
    writes(counter," ")

  }

  write()

end

# -------------------------------------------------------------------

procedure KMP()
end

# -------------------------------------------------------------------

procedure ASPC()

  n := 6 ; m := 3

  # List of factorials
  factorials := factorialsUpTo(n)

  # Number of combinations
  sum := 0 ; lastIndex := n + 1 ; la1 := lastIndex + 1
  every k := m + 1 to lastIndex do
    sum +:= factorials[lastIndex] / (factorials[la1 - k] * factorials[k])

  # Result
  write(sum % 1000000)

end

procedure factorialsUpTo(n)

  # Create and initialize list
  maxI := n + 1
  factorials := list(maxI)
  factorials[1] := factorials[2] := 1

  # Calculate factorials
  every i := 3 to maxI do {
    i1 := i - 1
    factorials[i] := factorials[i1] * i1
  }

  return factorials

end

# -------------------------------------------------------------------

procedure SETO()
end

# -------------------------------------------------------------------

procedure main()

  #FIBO()
  #BINS()
  #DEG()
  #INS()
  #DDEG()
  #MAJ()
  #MER()
  #MS()
  #SUM2()
  #BFS()
  #PPER()
  #LEXF()
  #REVP()
  #LGIS() ?
  #SSEQ()
  #PMCH()
  #PAR()
  #CC()
  #LEXV()
  #TREE()
  #SQ()
  #INOD()
  #PDST()
  #SSET()
  #LONG()
  #CORR()
  #KMER()
  KMP()
  ASPC()
  SETO()

end

# -------------------------------------------------------------------
